{"./":{"url":"./","title":"ToolCSS","keywords":"","body":" 为了方便大家快速布局，标准化基本样式的目的。我把自己常用的css和规范做了个基本的梳理，分享给大家使用。包括布局、颜色、排版等常用模块。 项目引用: yarn add --save-dev less-loader less yarn add toolcss 或者 yarn add --save-dev less-loader less npm install toolcss -S 编辑此文档： 文档clone下来了请这样启动 yarn global add gitbook-cli yarn install gitbook install ##每次增加文件之后需要重新执行如下两步 gitbook init gitbook serve 本库的文档 由gitbook编纂而成 欢迎大家push 增加功能 修改错误 markdown建议使用 typora 编辑 2019年1月2日 何 勋 "},"Prologue/":{"url":"Prologue/","title":"Start","keywords":"","body":"Start level4: Project css level3: Elementuicss && overwrite style level2: Toolcss level1: Normalize.css/Reset css 在项目中 我一般把项目的css粗略分成4个层次 第一层normalize/reset css是用来抹平 浏览器原生样式不一致的问题 第二层也就是我当前这个库 抽离了构建业务中大量重复的样式和冗余的代码 第三层是ui框架 和我们覆写的样式 第四层是项目级的样式 往细划分还有提取出组件级、页面级、项目级、主题级的层次来 当前的这个库不涉及任何组件的东西，不把目标设定的过于复杂 希望达到高复用的效果。 原生基础样式建议使用normalize.css yarn add normalize.css 开始使用请 单独下载这两个文件： toolcss.css toolcss_mixin.less "},"Prologue/in-vuecli3.html":{"url":"Prologue/in-vuecli3.html","title":"vue-cli3.0中使用","keywords":"","body":"vue-cli3.0中使用 VUE-CLI3全局引入less的变量 首先确定是vue-cli3.x而不是2.9.x，我昨天就被这个给坑了， 其实这个东西也简单，用style-resources-loader来处理就OK了 vue add style-resources-loader 安装完成后选择less预处理器，他会在vue.config.js代码中生成 pluginOptions: { 'style-resources-loader': { preProcessor: 'less', patterns: [ // 下面这段是自己加的，根据自己文件的位置来修改 path.resolve(__dirname, \"./src/assets/css/toolcss_mixin.less\") ] } } toolcss.css 直接在mainjs中引用 import \"./assets/css/toolcss.css\"; 如果你能成功安装那么你就跳过后面这段话 本人在安装的时候装不了，暂时不知道原因，才疏学浅，有知道的大佬说下 我是直接去他报错的源文件修改的源代码 等安装成功后再把这段话给删掉。。。 "},"Chapter1/":{"url":"Chapter1/","title":"规范","keywords":"","body":"1.什么是Web前端开发流程 流程，通俗来讲，就是许多人，在做一系列的事情时，怎样相互协调，安排好这一系列事情的先后顺序，有什么事先的约定，需要达到怎样的预期目标。 在网站制作开发工作中，前端工程师需要处理的需求越来越多。早些时候，前端开发流程还是比较模糊的。很多时候，前端开发工作被认为是用来穿插在后端开发的过程当中。随着前端开发的业务需求日益庞大，团队规模不断扩大，网站应用交互变得更复杂，前端的开发流程也成为了一个必不可少的规范。这个流程主要是需要针对产品的需求做了严谨的约定，制定了相关的里程碑，包括审核需求、提交代码、每日测试、预发测试、正式发布到线上。 2.开发流程的作用 在团队不断成长的过程中，处理的需求数量也在增长，需要考虑到开发的效率、产品的质量以及团队协作间的配合等因素，前端开发流程应该为我们解决很多相关的问题:督促需求方做好相关的规划有些时候，一些需求的细节还没完全确定，但需求方总希望能将他想到的各种细节都实现出来，然后再挑选其中一种做为他的方案，所以需求的变更会有些频繁，然而这样的成本有些高，一切应该在计划后再去实现，而非反其道而行。 现在需求方会在提需求之前，会花时间地去考虑他们的需求，将尽可能多的情况都想清楚，做好必要的沟通工作，权衡各种利弊之后，再给出一个比较成形的方案。 保证需求安排的有序性在一个大的团队中，不同部门的同事在一起合作，因为沟通及一些特殊情况，效率或多或少会受到一些影响，良好的规划能有助于提高开发的效率。 通过每周的需求审核，安排好下一周的日程，由于需求的优先级和先后顺序都已排定，工作的条理性会更加清晰，需求插队的现象也有明显减少。当然我们也有紧急流程，但是它仅限于处理线上bug以及一些经过多方确认的紧急需求，有其自己的适用范围。 统一测试，归避风险之前的日常处理中，可能会遇到这样的情况:甲、乙两个开发工程师分别需要处理两个日常需求，他们的需要改动到的代码会有重合的部分，如果他们并不知道这个情况，那么在他们本地的单独测试中，一切都是正常的，然而当发布到线上去时，发现出了bug或者一方的改动没有同步到线上，查原因后发现是提交的代码相互覆盖了。 现在要处理的需求数量越来越多，为了避免上述情况，新流程实行以后，大家会统一来做多次测试，这样就更容易发现bug，可以大大降低协作开发而产生的风险。 总体来讲，我们之所以需要开发流程，是因为: 行业成熟的必然。从“作坊”发展到“流水线”； 生产环节细分。职(专)业化程度进一步提高一切源于“品质”和”效率“的需要； 追求的目标/FDP的价值:代码质量、开发效率、多人协作； 对公司和工程师都有利； 面向企业级项目； 保证前端代码的质量和开发效率； 实现多人协作； "},"Chapter1/specificationhtml.html":{"url":"Chapter1/specificationhtml.html","title":"html规范","keywords":"","body":"HTML规范 1.基础规范 1.1 为每个HTML 页面的第一行添加标准模式（standard mode）的声明，这样能够确保在每个浏览器中拥有一致的展现。(Line1) 1.2 html根元素指定lang属性，从而为文档设置正确的语言。(Line2) 1.3 声明文档的编码charset，且与文件本身编码保持一致，推荐使用UTF-8编码。根据页面内容和需求填写适当的keywords和description。(Line4) 1.4 每个页面必须有且仅有一个title元素。(Line5) 1.5 在引入CSS和JavaScript文件时一般不需要指定type属性，因为text/css和text/javascript分别是它们的默认值。(Line6/7) 1.6 当link元素用于引用CSS文档时, 默认media是screen, 如为特殊终端提供样式, 请指定media属性, 如media=“print”。 1.7 css 引用置于头部标签内。 1.8 js 引用置于底部标签前。 Sample page Tip: IE 支持通过特定的标签来确定绘制当前页面所应该采用的IE版本。除非有强烈的特殊需求，否则最好是设置为edge mode，从而通知 IE 采用其所支持的最新的模式。 2.属性顺序 class （class是为高可复用组件设计的，所以应处在第一位） id、name （id更加具体且应该尽量少使用，所以将它放在第二位） data-* src、for、type、href、value placeholder、title、alt aria-*、role required、readonly、 disabled 3. id/class命名规则 3.1 遵循“内容优先，表现为辅”的基本原则 首先根据内容命名，如header、footer。若根据内容无法找到合适的命名，再结合表现进行辅助，如col-main、blue-box。 3.2 一律小写，多个单词以“-”连接 不能使用下划线和驼峰命名法，如main-nav。可基于最近的父元素名称作为前缀。 3.3 在不影响语义的情况下，可适当使用缩写 缩写只用来表示结构，如col、nav、btn等，不可自造缩写。 3.4 避免广告拦截词汇 ad、ads、adv、banner、sponsor、gg、guangg、guanggao等，页面中尽量避免采用以上词汇来命名 4. 标签使用 4.1 标签必须放在内。 4.2 标签用于强调重要性, 标签用于表示内容的着重点。参考 4.3 当link元素用于引用CSS文档时, 默认media是screen, 如为特殊终端提供样式, 请指定media属性, 如media=“print”; 4.4 img标签必须加alt，尤其是logo、商品图片等关键图片信息，对SEO友好。 4.5 减少标签的数量 编写 HTML 代码时，尽量避免多余的父元素。很多时候，这需要迭代和重构来实现。 4.6 所有html标签必须有结束符，, , , , , 除外。 5. 注释规范 页面中使用注释划分结构块，注意与css中的注释达成统一格式。 LOGO NAV1 NAV2 "},"Chapter1/specificationcss.html":{"url":"Chapter1/specificationcss.html","title":"css规范","keywords":"","body":"CSS规范 1. 属性顺序 1.1 位置属性(position、top、right、z-index、display、float等)； 1.2 大小(width, height, padding, margin等)； 1.3 文字系列(font、line-height、letter-spacing、color、text-align等)； 1.4 背景(background、border等)； 1.5 其他(animation、transition等)。 .declaration-order { /* Positioning */ position: absolute; top: 0; right: 0; bottom: 0; left: 0; z-index: 100; /* Box-model */ display: block; float: right; width: 100px; height: 100px; /* Typography */ font: normal 13px \"Helvetica Neue\", sans-serif; line-height: 1.5; color: #333; text-align: center; /* Visual */ background-color: #f5f5f5; border: 1px solid #e5e5e5; border-radius: 3px; /* Misc */ opacity: 1; } 2. 选择器 如无必要，不得为 id、class 选择器添加类型选择器进行限定，在性能和维护性上，都有一定的影响。 /* 推荐*/ #error, .danger-message { font-color: #c00; } /* 不推荐*/ dialog#error, p.danger-message { font-color: #c00; } 3. 属性使用缩写 在需要显示地设置所有值的情况下，应当尽量限制使用简写形式的属性声明。常见的滥用简写属性声明的情况如下： padding margin font background border border-radius 另外，对于#aabbcc形式的颜色值也可简化为#abc，这样精简代码同时又能提高用户的阅读体验。 4. a标签伪类书写顺序 标签的这四个伪类的特殊性是一样的，所以当某个链接处于的状态同时激活多个伪类时，那么伪类的书写顺序就起到了关键作用，从而影响最终的显示效果。 link->visited->hover->active 5. 媒体查询（Media query）的位置 媒体查询放在相关规则后面或者统一放在文档底部，若统一放在文档底部的时候，顺序应按照正常样式进行排布且注释统一。 "},"Chapter2/layout.html":{"url":"Chapter2/layout.html","title":"布局","keywords":"","body":"布局 语义化盒子 类名 代码 作用 comm-wrapper width:100%;height:100%; 所有子页面body下的第一个预置盒子 full-box width:100%;height:100%; 宽高100% 宽高 步长5 5%-100% pct代表percent百分比 类名 代码 作用 pctw100 width:100% 宽度100% pcth100 height:100%; 高度100% pctw5 pctw10 pctw15 ... pctw95 pcth5 pcth10 pcth15 ... pcth95 通用margin 步长5 5px-40px 涵盖四向 上下左右单独的外边距 超出部分请在自己的选择器里单独写 类名 代码 作用 pl0 padding-right: 0 !important; 强制清除左内边距 pr0 padding-left: 0 !important; 强制清除右内边距 m5 margin:5px; mt5 margin-top mr5 margin-right:5px; mb5 margin-bottom:5px; ml5 margin-left:5px; m10 margin:10px; mt10 margin-top:10px; mr10 margin-right:10px; mb10 margin-bottom:10px; ml10 margin-left:10px; ... .. ml40 左外边距40px 通用padding 步长5 5px-40px 涵盖四向 上下左右单独的内边距 超出部分请在自己的选择器里单独写 类名 代码 作用 p5 padding:5px; pt5 padding-top:5px; pr5 padding-right:5px; pb5 padding-bottom:5px; pl5 padding-left:5px; p10 padding:10px; pt10 padding-top:10px; pr10 padding-right:10px; pb10 padding-bottom:10px; pl10 padding-left:10px; ... ... pl40 示例： 是否提交？ 确定 浮动相关 类名 代码 作用 fl float:left 左浮 fr float:right 右浮 clear clear:both 不收前面元素浮动影响 clearfix .clearfix:after{ content:\".\"; display:block; height:0; clear:both; visibility:hidden} .clearfix{ *+height:1%;} 浮动清除 zoom *zoom: 1; ie8 兼容 display 类名 代码 作用 dn display: none; 隐藏 db display: block; 块级元素 dib -moz-inline-stack: inline-block; vertical-align: top; *display: inline; display: inline-block; zoom: 1; 行内块级元素 di display: inline; 行内元素 inline&&浮动等宽 类名 代码 备注 inline-box font-size: 1em; letter-spacing: -.25em; inline-2float-2 width: 49.9%; 需要精确两分请用flex inline-3float-3 width: 33.3%; inline-4float-4 width: 24.9%; inline-5float-5 width: 19.9%; inline-6float-6 width: 16.6%; inline-any display: inline-block; display: inline; letter-spacing: 0; vertical-align: top; zoom: 1; 不指定宽度，inline-x任意一个盒子都有这个属性 示例： content1 content2 content3 示例： content1 content2 content3 定位 类名 代码 作用 posr position:relative 相对定位 posa positon:absolute 绝对定位不推荐使用 最好配合left top right bottom 明确写在自己的选择器内 posf postion:fixed 固定定位不推荐使用 最好配合left top right bottom 明确写在自己的选择器内 posa-out position: absolute;left: -999em; top: -999em; 绝对定位隐藏 posa-clip position: absolute; clip: rect(0 0 0 0); 绝对定位隐藏 弹性盒子 这里抽象了最常用的flex布局配合 在外层盒子加上 flex flex-x-y 即可完成布局 x代表justify-content的属性 分别有fs fe sb sa c 的缩写标识符 y代表align-item的属性 分别有fs fe c s b 的缩写标识符 所以不算继承的value值 能控制得出来的效果就有 5*5=25 个 我只放进去了常用的10多种 fs（flex-start）起始 fe（flex-end）最后 sa（space-around） sb（space-between） c（center）居中 s（strentch）拉伸 b（baseline）基线 底下未涉及的缩写为保留字 今后用到再扩展 flex外层盒子 类名 代码 作用 flex display:flex 弹性盒子 flex-rev flex-direction: column; 主纵轴旋转90° flex-wrap flex-wrap: wrap; flex换行 flex-cc justify-content:center;align-item:center; 水平垂直居中 flex-sb-c justify-content:space-between;align-item:center; 水平两端 垂直居中 flex-sb justify-content:space-between; 水平两端对齐 flex-sa justify-content:space-around; 水平空隙均等对齐 flex-sa-c justify-content:space-around;align-item:center; 水平空隙均等 垂直居中对齐 flex-fs justify-content:flex-start; 水平从前往后排 flex-fs-c justify-content:flex-start;align-item:center; 水平从前往后排 垂直居中 flex-fs-fe justify-content:flex-start;align-item:flex-end; 水平从前往后排 垂直从盒子底部开始排 flex-fe justify-content:flex-end; 水平从后往前排 flex-fe-c justify-content:flex-start;align-item:center; 水平从后往前 垂直居中 flex-fe-fe justify-content:flex-end;align-item:flex-end; 水平从后往前 垂直从后往前排 flex子盒子 类名 代码 作用 flex-1 flex:1 1份 flex-2 flex:2 2份 flex-3 flex:3 3份 flex-4 flex:4 4份 flex-5 flex:5 5份 flex-6 flex:6 6份 flex-7 flex:7 7份 flex-8 flex:8 8份 flex-9 flex:9 9份 flex-10 flex:10 10份 flex按份数均分 content1 content2 content3 按份数均分且不会随着文字的增加而撑大子盒子 content1 content2 content3 flex换行 且一排3个（flex-*）： content1 content2 content3 content3 content3 content3 content3 网格系统 请使用element ui/bootstrap的网格系统 "},"Chapter3/color.html":{"url":"Chapter3/color.html","title":"颜色","keywords":"","body":"颜色 中性色板 中性色包含了黑、白、灰。在蚂蚁中后台的网页设计中被大量使用到，合理的选择中性色能够令页面信息具备良好的主次关系，助力阅读体验。Ant Design 的中性色板一共包含了从白到黑的 10 个颜色。 这里特别列一下灰度的色值 类名 色值 white #fff grey-2 #fafafa grey-3 #f5f5f5 grey-4 #e8e8e8 grey-5 #d9d9d9 grey-6 #bfbfbf grey-7 #8c8c8c grey-8 #595959 grey-9 #262626 black #000 功能色 功能色代表了明确的信息以及状态，比如成功、出错、失败、提醒、链接等。功能色的选取需要遵守用户对色彩的基本认知。我们建议在一套产品体系下，功能色尽量保持一致，不要有过多的自定义干扰用户的认知体验。Ant Design 的功能色板如下图： 类名 功能色 col-linkbg-link 链接 col-successbg-success 成功 col-warningbg-waring 警告 col-errorbg-error 错误 基础色板 这里借用了Ant Design 的基础色板共计 120 个颜色，包含 12 个主色以及衍生色。这些颜色基本可以满足中后台设计中对于颜色的需求。 Dust Red / 薄暮斗志、奔放 Volcano / 火山醒目、澎湃 Sunset Orange / 日暮温暖、欢快 Calendula Gold / 金盏花活力、积极 Sunrise Yellow / 日出出生、阳光 Lime / 青柠自然、生机 Polar Green / 极光绿健康、创新 Cyan / 明青希望、坚强 Daybreak Blue / 拂晓蓝包容、科技、普惠 Geek Blue / 极客蓝探索、钻研 Golden Purple / 酱紫优雅、浪漫 Magenta / 法式洋红明快、感性 "},"Chapter4/typeset.html":{"url":"Chapter4/typeset.html","title":"排版/文本效果","keywords":"","body":"排版 省略号 类名 代码 作用 text-ellipsis overflow: hidden;display: -webkit-box;-webkit-box-orient: vertical; text-overflow: ellipsis; 单行出省略号 .text-ellipsis-2 -webkit-line-clamp: 2; 超过2行出省略号 .text-ellipsis-3 -webkit-line-clamp: 3; 超过3行出省略号 .text-ellipsis-4 -webkit-line-clamp: 4; 超过4行出省略号 文本效果 类名 效果 unselectable 文本不可选 tl 文本左对齐 tc 文本居中 tr 文本右对齐 t-lt 顶线 t-lm 中划线 t-lb 底线 b font-weight: 500; bs font-weight: 300; bm font-weight: 600; bl font-weight: 700; lh-1p5 line-height: 1.5; lh-2 line-height: 2; lh-2p5 line-height: 2.5; lh-3 line-height: 3; 文本大小 类名 代码 font12 fontsize:12px; font14 fontsize:12px; font16 fontsize:12px; ... ... font88 fontsize:88px; 加载动画 滚动条 overflow box 滚动条 overflow box 阴刻效果 etched-text 在文本悬停时在文本周围创建一个阴影框 etched-text 当文本悬停时，创建动画下划线效果。 hover to show effect 淡化悬停物品的兄弟姐妹 text a text b text c text d text e text f "},"Chapter5/mixin.html":{"url":"Chapter5/mixin.html","title":"mixin","keywords":"","body":"mixin 请单独引入 toolcss_mixin.less 项目装好并配置less-loader 直接在你的classname引用 .classname{ .gradient-h ( #fff, #aaa ); } Backgrounds Group .gradient-h 纵向渐变 .gradient-h ( #fff, #aaa ); gradient-v 水平渐变 .gradient-v ( #fff, #aaa ); .gradient-vline 纵向四色渐变 .gradient-vline ( #fff, #ddd, #aaa, #ddd ); .gradient-v3colors 纵向三色渐变 .gradient-v3colors ( #00b3ee, #7a43b6, 50%, #c3325f ); .gradient-radial 环形渐变 .gradient-radial ( #fff, #aaa ); .gradient-direction 自定义角度的渐变 .gradient-direction ( #fff, #aaa, 120 ); .bg-clip 背景裁切 .bg-clip ( border-box ); .bg-clip ( border ); .bg-size 背景尺寸 .bg-size ( 100%, 50% ); Transform Group .transform 变形 .transform ( perspective(0) translate3d(50px, 40px, 80px) scale3d(1, 2, 0) rotate3d(0, 1, 0, 45deg) ); .matrix 矩阵 .matrix ( 0.9, 0.2, -0.5, 0.9, 0, 0 ); .matrix3d 3d矩阵 .matrix3d ( \"1, 0, 0, 0, 0, 0.60, 0, -0.0009, 0, 0, 1, 0, 0, 0, 0, 1\" ); .rotate 旋转 .rotate ( 45 ); .rotate ( x, 45 ); .rotate ( y, 45 ); .rotate ( z, 45 ); .rotate3d 3d旋转 .rotate ( 15, 10, 5, 45 ); .scale 缩放 .scale ( 0.8 ); .scale ( x, 0.4 ); .scale ( y, 1.3 ); .scale ( z, .7 ); .scale3d 3d缩放 .scale3d ( .4, .5, 1.2 ); .translate 位移 .translate ( 20, 40 ); .translate ( x, 20 ); .translate ( y, 40 ); .translate ( z, 60 ); .translate3d 3d位移 .translate3d ( 20, 40, 60 ); .skew 扭曲 .skew ( 30, 4 ); .skew ( x, 20 ); .skew ( y, -30 ); .perspective 透视 .perspective ( 250 ); .perspective ( 250, px ); .perspective-origin 透视源 .perspective-origin ( 50% 50% ); .transform-origin 变形源 .transform-origin ( 30%, 40%, 0 ); .transform-style 变形形式 .transform-style ( preserve-3d ); Transition .transition 过渡属性动画 .transition ( width, .7s ); .transition ( property, 0.2s, ease-out, 0 ); Animation Group .animate 动画 .animate ( wobble ); .animate ( wobble, 2s, ease, 0, 1, normal ); .animation-state 动画状态 .animation-state ( running ); Column .columns 文本分栏 .columns ( 2, normal ); Misc Group .opacity 透明度 .opacity ( 0.7 ); .font 字 .font ( italic, normal, bold, 14px, 1, \"'Lucida Grande', Helvetica, Arial, Verdana, sans-serif\" ); .font-face 字体 .font-face ( MyFontName, \"../assets/fonts/sofia-pro\" ); .size 宽高 .size ( 400, 200 ); .square 正方形 .square ( 400 ); .cirecle 圆形 .cirecle ( 200 ); .triangle 三角形 .square (30,30,#red,t); .square (30,30,#red,r); .square (30,30,#red,b); .square (30,30,#red,l); .square (30,30,#red,tl); .square (30,30,#red,tr); .square (30,30,#red,br); .square (30,30,#red,bl); .resizable 可调宽高（用于文本域） .resizable ( both ); .resizable ( vertical ); .resizable ( horizontal ); .hide-text 隐藏文本 .hide-text; "}}